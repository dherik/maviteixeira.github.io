---
layout: post
title:  "Draft!"
date:   2019-07-05 23:35:00
tags: wip
comments: true
author: maviteixeira
preview: Draft!
---

#Topics in mind:
    -Why use interfaces to represent types instead of primitives (encapsulation)
    - How an architect is important
        Who needs a software architect paper
        Software architect is a fancy name for a expensive developer
        Architecture is hard to change (caracteristic)
        All architecture is design but not all design is architecture
        Think about BDUF
        Historical definition (Durability, Utility, Beauty)
        How the system is partition and the interaction
        As the system grows the design and system specifications become more significant issues thant the choice of algoritm
        Descriptions of elements and interaction between then
        Govern the components and connections and relation between projects not the details
        You always have an architect, could be the biggest bully or the most capability person
        Walking skeleton with incremental architecture
        Everyone should be involved but onw must assume the responsability
        As an architect you need to help everyone to do architecture, you are a facilitator and responsible
        Create, share, critique / Adding gality gateways to prevent know issues (Checkstyle, PDM and Spotbugs)
        Choose somebody to have an architect autority to make decisions
        A myth of no need to software on agile teams

    - Mocking tests break on every refactor
        Programmer Anarchy, Spike and Stabilize and Lean Software
        Duct Tape Programmer
        Dont know if the test is good or not in this point in time
        ATDD suites and customers don't engage
        Developers starts to ignoring red results
        Do not test implementation details but behaviors
        The trigger for test is the requirement, writing tests to cover use case
        UseGiveWhenThen model
        SUT is not a class
        Do not write tests to implementation details
        Unit of isolation is the test and no the class or method
        Isolation of the test or isolation of the code under test
        Focusing on methods create a test hard to maintain
        We cant refactor eaily because implementation details are exposed in the test
        Red-Green-Refactor
        We cant engineer your solution and make the code right at the first time
        When refactor you not write unit tests
        Refactor are safe moves the let you essentially change the design of the code but not behavior
        Coupling is much worse than DRY ? (Research)